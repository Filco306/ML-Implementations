% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NaiveBayes.R
\name{NB}
\alias{NB}
\title{Naive Bayes}
\usage{
NB(X, y, priors = "weighted", factor_max_length = 10)
}
\arguments{
\item{X}{is the feature matrix.}

\item{y}{is the response variable}

\item{priors}{are the priors to use for the classes. Default is "weighted", meaning the proportions of each class in the training set. Can also be \code{NULL}.}

\item{factor_max_length}{is used if the column is of class integer. If the number of different integers in a column is smaller than \code{factor_max_length}, it will be converted to a factor and a table will be constructed. Otherwise it will be a \code{GaussianNB}.}
}
\description{
A mixture between Gaussian Naive Bayes and Multinomial Naive Bayes, depending on which class the feature's column is.
}
\examples{
library("bnlearn")
X = clgaussian.test[,-c(1)]
y = clgaussian.test[,1]
X$C = as.integer(X$C)
X$G = as.integer(X$G)
NB_ = NB(X, y)
table(y,fitted(NB_))
t(fitted(NB_, ret_probabilities = T))
# See how priors changes accuracy and incorrectly classified
priors = t(apply(as.matrix(seq(0,1,length=100)), 1, function(x) c(x, 1 - x)))

res = t(apply(priors, 1, function(priors_) {
 NB_ = NB(X, y, priors = priors_)
 print(priors_)
 accuracy = sum(diag(table(y, fitted(NB_))))/sum(table(y, fitted(NB_)))
 a_b = table(Actual = y, Predicted = fitted(NB_))[1,2]
 b_a = table(Actual = y, Predicted = fitted(NB_))[2,1]
 return(c(a_b, b_a, accuracy))
}))
par(mfrow=c(2,1))
plot(x=priors[,1],y=res[,1], type = "l", lwd = 3, col = "blue", ylim = c(0, max(res[,1:2])))
lines(x=priors[,1],res[,2], lwd = 3, col = "red")
abline(v=sum(y == "a")/length(y), lwd = 3)
plot(x = priors[,1], y=res[,3], type = "l", lwd = 3, col = "blue",)
# Check the weighted prior's accuracy
abline(v=sum(y == "a")/length(y), lwd = 3)
par(mfrow=c(1,1))
}
