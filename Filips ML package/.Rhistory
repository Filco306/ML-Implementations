levels = levels(temps$MonthDay))
colnames(point) = c(colnames(featuresToUse)[1:4],colnames(featuresToUse)[6])
return(point)
}
pred_point_sum_kernel = function(pointToPred, data) {
data = data[data[,3] <= pointToPred[3],]
temps_data = as.matrix(data[,5])
distances = apply(data[,1:2], 1, function(dataCoords) {
return(distHaversine(dataCoords, pointToPred[1:2]))
})
kernSum = as.matrix(timeKernel(time1 = rep(pointToPred[4], times = nrow(data)),
time2 = data[,4], h = h_time) +
gaussianDistKernel(dist = distances,
h = h_distance) +
gaussianDateKernel(day1 = rep(pointToPred[3],
times = nrow(data)),
day2 = data[,3],
h = h_date))
above = (t(kernSum)%*%temps_data)[1,1]
below = sum(kernSum)
return(above/below)
}
pred_point_prod_kernel = function(pointToPred, data) {
data = data[data[,3] <= pointToPred[3],]
temps_data = as.matrix(data[,5])
distances = apply(data[,1:2], 1, function(dataCoords) {
return(distHaversine(dataCoords, pointToPred[1:2]))
})
kernProd = as.matrix(timeKernel(time1 = rep(pointToPred[4], times = nrow(data)),
time2 = data[,4],
h = h_time) *
gaussianDistKernel(dist = distances,
h = h_distance) *
gaussianDateKernel(day1 = rep(pointToPred[3], times = nrow(data)),
day2 = data[,3],
h = h_date))
above = (t(kernProd)%*%temps_data)[1,1]
below = sum(kernProd)
return(above/below)
}
norrkopingTimes = get_points(stationName = "Norrköping",
date = date,
times = times,
monthDay = monthDay)
LinkopingTimes = get_points(stationName = "Linköping",
date = date,
times = times,
monthDay = monthDay)
# Calculate temp
tempsSum = as.numeric()
tempsProd = as.numeric()
count = 0
for (i in 1:nrow(norrkopingTimes)) {
tempsSum[i] = pred_point_sum_kernel(norrkopingTimes[i,], data = featuresToUse)
tempsProd[i] = pred_point_prod_kernel(norrkopingTimes[i,], data = featuresToUse)
count = count + 1
print(count)
}
# Plot
plot(tempsSum, type="o",
ylim = c(min(tempsSum,tempsProd), max(tempsSum,tempsProd)),
col = "red", lwd = 3, xlab = "Time", ylab = "Temperature")
lines(tempsProd, type = "o", col = "blue", lwd = 3)
axis(1, at=1:11, labels=times)
par(mfrow=c(2,2))
distSeq = seq(-400000, 400000, 40)
plot(x=distSeq,
gaussianDistKernel(dist = distSeq, h = h_distance),
type = "l", lwd = 3,
xlab = "Distance",
ylab = "Gaussian distance kernel value",
main = "Sensibility distance kernel")
# Show for time
timeSeq = seq(1,170,1)
plot(x=timeSeq, y = gaussianKernel(x1 = 40, x2 = timeSeq, h = h_time),
type = "l",
lwd = 3,
xlab = "Time",
ylab = "Gaussian kernel value",
main = "Sensibility time kernel for t = 05:25:00")
dateSeq = seq(1,19049,1)
plot(x=dateSeq,
y = gaussianKernel(x1 = 4000, x2 = dateSeq, h = h_date),
type = "l", lwd = 3,
xlab = "Date",
ylab = "Gaussian kernel value",
main = "Sensibility date kernel for date = 1970-02-05")
dateSeq = seq(1,366,1)
plot(x=dateSeq,
y = seasonalKernel(day1 = 10, day2 = dateSeq, h = h_season),
type = "l", lwd = 3, xlab = "Date of year",
ylab = "Gaussian kernel value",
main = "Sensibility seasonal kernel for date = day 10")
par(mfrow=c(2,2))
distSeq = seq(-400000, 400000, 40)
plot(x=distSeq,
gaussianDistKernel(dist = distSeq, h = h_distance),
type = "l", lwd = 3,
xlab = "Distance",
ylab = "Gaussian distance kernel value",
main = "Sensibility distance kernel")
# Show for time
timeSeq = seq(1,170,1)
plot(x=timeSeq, y = gaussianKernel(x1 = 40, x2 = timeSeq, h = h_time),
type = "l",
lwd = 3,
xlab = "Time",
ylab = "Gaussian kernel value",
main = "Sensibility time kernel for t = 05:25:00")
dateSeq = seq(1,366,1)
plot(x=dateSeq,
y = gaussianDateKernel(day1 = 10, day2 = dateSeq, h = h_season),
type = "l", lwd = 3, xlab = "Date of year",
ylab = "Gaussian kernel value",
main = "Sensibility seasonal kernel for date = day 10")
60*24
par(mfrow=c(2,2))
distSeq = seq(-400000, 400000, 40)
plot(x=distSeq,
gaussianDistKernel(dist = distSeq, h = h_distance),
type = "l", lwd = 3,
xlab = "Distance",
ylab = "Gaussian distance kernel value",
main = "Sensibility distance kernel")
# Show for time
timeSeq = seq(1,1440,1)
plot(x=timeSeq, y = timeKernel(time1 = 60*7, time2 = timeSeq, h = h_time),
type = "l",
lwd = 3,
xlab = "Time",
ylab = "Gaussian kernel value",
main = "Sensibility time kernel for t = 07:00:00")
dateSeq = seq(1,366,1)
plot(x=dateSeq,
y = gaussianDateKernel(day1 = 10, day2 = dateSeq, h = h_season),
type = "l", lwd = 3, xlab = "Date of year",
ylab = "Gaussian kernel value",
main = "Sensibility seasonal kernel for date = day 10")
par(mfrow=c(2,2))
distSeq = seq(-400000, 400000, 40)
plot(x=distSeq,
gaussianDistKernel(dist = distSeq, h = h_distance),
type = "l", lwd = 3,
xlab = "Distance",
ylab = "Gaussian distance kernel value",
main = "Sensibility distance kernel")
# Show for time
timeSeq = seq(1,1440,1)
plot(x=timeSeq, y = timeKernel(time1 = 60*7, time2 = timeSeq, h = h_time),
type = "l",
lwd = 3,
xlab = "Time",
ylab = "Gaussian kernel value",
main = "Sensibility time kernel for t = 07:00:00")
dateSeq = seq(1,366,1)
plot(x=dateSeq,
y = gaussianDateKernel(day1 = 10, day2 = dateSeq, h = h_date),
type = "l", lwd = 3, xlab = "Date of year",
ylab = "Gaussian kernel value",
main = "Sensibility seasonal kernel for date = day 10")
par(mfrow=c(1,1))
t = seq(-5,5,length=1000)
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t))
}
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t))
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, OLS_loss())
plot(t, ols_losses)
plot(t, ols_losses, type = "l")
lines(t, huber_losses)
lines(t, huber_losses, col = "green")
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - c)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l")
lines(t, huber_losses, col = "green")
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l")
lines(t, huber_losses, col = "green")
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green")
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", lwd = 3, ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green")
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", lwd = 3, ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green", lwd = 3)
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", lwd = 4, ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green", lwd = 4)
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t))
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", lwd = 4, ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green", lwd = 4)
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", lwd = 4, ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green", lwd = 4)
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", lwd = 4, ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green", lwd = 4)
legend("top", lty = 1,
legend = c("OLS loss function",
"Huber loss function"),
col = c("black", "green"))
help(legend)
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", lwd = 4, ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green", lwd = 4)
legend("top", lty = 1,
legend = c("OLS loss function",
"Huber loss function"),
col = c("black", "green"))
t = seq(-5,5,length=1000)
huber_loss = function(t, c = 1.345) {
return(apply(as.matrix(t), 1, function(t) {
if (abs(t) < c) {
return(0.5*t^2)
} else {
return(c*abs(t) - 0.5*c^2)
}
}))
}
OLS_loss = function(t) {
return(0.5*t^2)
}
ols_losses = OLS_loss(t)
huber_losses = huber_loss(t)
plot(t, ols_losses, type = "l", xlab = "t", lwd = 4, ylab = "Loss", main = "Comparison of OLS loss function and Huber loss function")
lines(t, huber_losses, col = "green", lwd = 4)
legend("top", lty = 1, lwd=3,
legend = c("OLS loss function",
"Huber loss function"),
col = c("black", "green"))
library(devtools)
install_github("DoktorMike/dammmdatagen")
library(dammmdatagen)
library("dammmdatagen", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:dammmdatagen", unload=TRUE)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp",  dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
library("grDevices", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("datasets", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("Rcpp",  dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
library(dammmdatagen)
price_data = generatePriceData()
competitor_data = generateCompetitorData()
distribution_data = generateDistributionData()
event_data = generateEventData()
macro_data = generateMacroData()
library(dammmdatagen)
set.seed(12345)
price_data = generatePriceData()
competitor_data = generateCompetitorData()
distribution_data = generateDistributionData()
event_data = generateEventData()
macro_data = generateMacroData()
set.seed(1111)
competitor_data = generateCompetitorData()
set.seed(12345)
price_data = generatePriceData()
competitor_data = generateCompetitorData()
distribution_data = generateDistributionData()
event_data = generateEventData()
macro_data = generateMacroData()
offline_data = generateOfflineData()
online_data = generateOnlineData()
price_data = generatePriceData()
price_data = generatePriceData()
weather_data = generateWeatherData()
mmm_data = generateData()
View(online_data)
mmm_data = generateData()
competitor_data = generateCompetitorData()
distribution_data = generateDistributionData()
event_data = generateEventData()
sum(event_data$event_a)
sum(event_data$event_b)
offline_data = generateOfflineData()
online_data = generateOnlineData()
price_data = generatePriceData()
help(generateData())
help(generateData
)
generateData()
mmm_data = generateData(onlineInsertionNames = c("facebook", "instagram", "display", "search_branded"))
mmm_data = generateData(onlineInsertionNames = c("facebook", "instagram", "display", "search_branded"), macronames = c("cpi", "something", "something2"))
mmm_data = generateData(onlineInsertionNames = c("facebook", "instagram", "display", "search_branded"), macroNames = c("cpi", "something", "something2"))
mmm_data = generateData(onlineInsertionNames = c("facebook", "instagram", "display", "search_branded"))
offline_data = generateOfflineData()
online_data = generateOnlineData()
online_data$net
head(online_data$net)
plot(online_data$net$date, online_data$net$facebook)
plot(online_data$net$date, online_data$net$facebook, type = "l")
plot(online_data$net$date, online_data$net$search_branded, type = "l")
as.factor(c("good","bad"))
typeof(as.factor(c("good","bad")))
as.numeric(as.factor(c("good","bad")))
as.numeric(as.factor(c("good","bad")))
#https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
# create("Filips.ML.package")
# setwd("./cats")
# document()
#' When update to package is done (for Filips ML package):
#' 1. Set working directory to package.
#' 2. setwd("~/Desktop/Programmeringsprojekt/Machine Learning/Filips ML package/Filips.ML.package")
#'    document()
#' 3. Set working directory to folder above and reinstall the package with updates.
#'    setwd("~/Desktop/Programmeringsprojekt/Machine Learning/Filips ML package")
#'    install("Filips.ML.package")
#'
# To use the ML functions, run the code below.
library("devtools")
library(roxygen2)
setwd("/Users/filipcornell/Desktop/Programmeringsprojekt/ML-Implementations/Filips ML package/Filips.ML.package")
document()
setwd("/Users/filipcornell/Desktop/Programmeringsprojekt/ML-Implementations/Filips ML package")
install("Filips.ML.package")
#this.dir <- dirname(parent.frame(2)$ofile) #To set it to source file location
#setwd(this.dir) #To set it to source file location
#library("Filips.ML.package")
