# Send in the nets of each media channel.
# As of currently, we send in 6 media channels - 3 online, 3 offline
# Send in lambdas as a matrix or vector
# TBD
simple_decay_rate = function(data, col_indices, lambda, L = 15) {
data_to_decay = as.matrix(data[,col_indices])
media_decayed = matrix(rep(0,nrow(data)*length(col_indices)), nrow = nrow(data), ncol = length(col_indices))
media_decayed[1,] = data_to_decay[1,]
for (i in 1:nrow(data_to_decay)) {
print(media_decayed[i,])
media_decayed[i,] = media_decayed[i,] + recursive_decay(data_to_decay, lambda, i, i_max = i + L)
print(media_decayed[i,])
}
return(media_decayed)
}
# Send in the nets of each media channel.
# As of currently, we send in 6 media channels - 3 online, 3 offline
# Send in lambdas as a matrix or vector
# TBD
simple_decay_rate = function(data, col_indices, lambda, L = 15) {
data_to_decay = as.matrix(data[,col_indices])
media_decayed = matrix(rep(0,nrow(data)*length(col_indices)), nrow = nrow(data), ncol = length(col_indices))
media_decayed[1,] = data_to_decay[1,]
for (i in 1:nrow(data_to_decay)) {
print(media_decayed[i,])
media_decayed[i,] = media_decayed[i,] + recursive_decay(data_to_decay, lambda, i, i_max = i + L)
print(media_decayed[i,])
}
return(media_decayed)
}
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
recursive_decay = function(data_to_decay, lambda, i, i_max, L = 15) {
if (i > max(i_max - L,0)) {
return(data_to_decay[i,]*lambda^(i_max - i) + recursive_decay(data_to_decay, lambda, i = (i - 1), i_max = i_max, L = L))
} else {
return(0)
}
}
# Send in the nets of each media channel.
# As of currently, we send in 6 media channels - 3 online, 3 offline
# Send in lambdas as a matrix or vector
# TBD
simple_decay_rate = function(data, col_indices, lambda, L = 15) {
data_to_decay = as.matrix(data[,col_indices])
media_decayed = matrix(rep(0,nrow(data)*length(col_indices)), nrow = nrow(data), ncol = length(col_indices))
media_decayed[1,] = data_to_decay[1,]
for (i in 1:nrow(data_to_decay)) {
print(media_decayed[i,])
media_decayed[i,] = media_decayed[i,] + recursive_decay(data_to_decay, lambda, i, i_max = i, L = L)
print(media_decayed[i,])
}
return(media_decayed)
}
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
plot(simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate))
seq(10,1,1)
10:1
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)[,1]
a
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
# Send in the nets of each media channel.
# As of currently, we send in 6 media channels - 3 online, 3 offline
# Send in lambdas as a matrix or vector
# TBD
simple_decay_rate = function(data, col_indices, lambda, L = 15) {
data_to_decay = as.matrix(data[,col_indices])
media_decayed = matrix(rep(0,nrow(data)*length(col_indices)), nrow = nrow(data), ncol = length(col_indices))
for (i in 1:nrow(data_to_decay)) {
print(media_decayed[i,])
media_decayed[i,] = media_decayed[i,] + recursive_decay(data_to_decay, lambda, i, i_max = i, L = L)
print(media_decayed[i,])
}
return(media_decayed)
}
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
recursive_decay = function(data_to_decay, lambda, i, i_max, L = 15) {
if (i > max(i_max - L,0)) {
return(data_to_decay[i,]*lambda^(i_max - i + 1) + recursive_decay(data_to_decay, lambda, i = (i - 1), i_max = i_max, L = L))
} else {
return(0)
}
}
# Send in the nets of each media channel.
# As of currently, we send in 6 media channels - 3 online, 3 offline
# Send in lambdas as a matrix or vector
# TBD
simple_decay_rate = function(data, col_indices, lambda, L = 15) {
data_to_decay = as.matrix(data[,col_indices])
media_decayed = matrix(rep(0,nrow(data)*length(col_indices)), nrow = nrow(data), ncol = length(col_indices))
for (i in 1:nrow(data_to_decay)) {
print(media_decayed[i,])
media_decayed[i,] = media_decayed[i,] + recursive_decay(data_to_decay, lambda, i, i_max = i, L = L)
print(media_decayed[i,])
}
return(media_decayed)
}
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
recursive_decay = function(data_to_decay, lambda, i, i_max, L = 15) {
if (i > max(i_max - L,0)) {
return(data_to_decay[i,]*lambda^(i_max - i + 1) + recursive_decay(data_to_decay, lambda, i = (i - 1), i_max = i_max, L = L))
} else {
return(0)
}
}
# Send in the nets of each media channel.
# As of currently, we send in 6 media channels - 3 online, 3 offline
# Send in lambdas as a matrix or vector
# TBD
simple_decay_rate = function(data, col_indices, lambda, L = 15) {
data_to_decay = as.matrix(data[,col_indices])
media_decayed = matrix(rep(0,nrow(data)*length(col_indices)), nrow = nrow(data), ncol = length(col_indices))
for (i in 1:nrow(data_to_decay)) {
#print(media_decayed[i,])
media_decayed[i,] = media_decayed[i,] + recursive_decay(data_to_decay, lambda, i, i_max = i, L = L)
#print(media_decayed[i,])
}
return(media_decayed)
}
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
plot(simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)[,1])
a = 10:1
plot(simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)[,1])
a = matrix(10:1, ncol = 2)
plot(simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)[,1])
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
a
a = matrix(c(10,1,rep(0,8)), byrow = T, ncol = 2)
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
lambda_decay_rate = 0.5
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)
plot(simple_decay_rate(data = a, col_indices = 1:2, lambda = lambda_decay_rate)[,1])
# If you don't have the package installed, please uncomment and run the two lines below.
#library(devtools)
#install_github("DoktorMike/dammmdatagen")
rm(list=ls())
library(dammmdatagen)
#################################################
############### SET PARAMETERS ##################
#################################################
lambda_decay_rate = 0.3
#' mmm_data seems to contain:
#' weather_data
#' competitor_data
#' macro_data
#' distribution_data as product_a.x
#' price_data as product_a.y
#' distribution_data? What is product_b.x and product_a.y? product_a.y seems to be the price. product_a.x seems to be the distribution data
#' price_data as product_a.y
#'
#' Thus, we must merge:
#' offline_data
#' online_data
#' event_data
#' Explanations of data (big X meaning arbitrarily numbered variable):
#' sunshine - standardized measure of how much sunshine there is.
#' precipitation - standardized measure of how much rain there is.
#' temperature - standardized measure of the temperature.
#' competitor_X - seems to be a measure for spending of the competitors.
#' product_X.x - seems to be same as distribution_data.
#' product_X.y - seems to be same as price_data.
#' cpi - Consumer price index.
#' cci - Commodity channel index.
#' gdp - gross domestic product
#' event_X - binary variable indicating whether event X has occurred or not.
#' X, cpm - cost per mille - cost per 1000 displays
#' X, impression -
#' X, net - spending?
####################################
######## PREPARING THE DATA ########
####################################
# Returns specific names for columns for offline and online data
get_col_names_marketing_data = function(data_set, to_append) {
colnames(data_set) = c("date", apply(as.matrix(colnames(data_set)[2:4]),1, function(name) {
return(paste(name, to_append))
})
)
return(data_set)
}
set.seed(12345)
mmm_data = generateData(fromDate = Sys.Date() - 3 * 365, toDate = Sys.Date(), kpi ="sales")
#competitor_data = generateCompetitorData()
#distribution_data = generateDistributionData()
set.seed(12345)
event_data = generateEventData(fromDate = Sys.Date() - 3 * 365, toDate = Sys.Date())
set.seed(12345)
offline_data = generateOfflineData(fromDate = Sys.Date() - 3 * 365, toDate = Sys.Date())
set.seed(12345)
online_data = generateOnlineData(fromDate = Sys.Date() - 3 * 365, toDate = Sys.Date())
#macro_data = generateMacroData()
#price_data = generatePriceData()
offline_data$net = get_col_names_marketing_data(offline_data$net, "- net")
offline_data$impression = get_col_names_marketing_data(offline_data$impression, "- impression")
offline_data$cpm = get_col_names_marketing_data(offline_data$cpm, "- cpm")
online_data$net = get_col_names_marketing_data(online_data$net, "- net")
online_data$impression = get_col_names_marketing_data(online_data$impression, "- impression")
online_data$cpm = get_col_names_marketing_data(online_data$cpm, "- cpm")
all_data = merge(mmm_data, event_data, by = "date")
all_data = merge(all_data, offline_data$net, by = "date")
all_data = merge(all_data, offline_data$impression, by = "date")
all_data = merge(all_data, offline_data$cpm, by = "date")
all_data = merge(all_data, online_data$net, by = "date")
all_data = merge(all_data, online_data$impression, by = "date")
all_data = merge(all_data, online_data$cpm, by = "date")
data = all_data
prod_a_data = data[,c(1:11,14,17:36)]
prod_b_data = data[,c(1:10,12,15,17:36)]
prod_c_data = data[,c(1:10,13,16,17:36)]
prod_a_data$response = prod_a_data$product_a.x*prod_a_data$product_a.y
prod_b_data$response = prod_b_data$product_b.x*prod_b_data$product_b.y
prod_c_data$response = prod_c_data$product_c.x*prod_c_data$product_c.y
# Remove the rest, and keep only the all_data
rm(event_data, online_data, offline_data, mmm_data, all_data)
recursive_decay = function(data_to_decay, lambda, i, i_max, L = 15) {
if (i > max(i_max - L,0)) {
return(data_to_decay[i,]*lambda^(i_max - i + 1) + recursive_decay(data_to_decay, lambda, i = (i - 1), i_max = i_max, L = L))
} else {
return(0)
}
}
# Send in the nets of each media channel.
# As of currently, we send in 6 media channels - 3 online, 3 offline
# Send in lambdas as a matrix or vector
# TBD
simple_decay_rate = function(data, col_indices, lambda, L = 15) {
data_to_decay = as.matrix(data[,col_indices])
media_decayed = matrix(rep(0,nrow(data)*length(col_indices)), nrow = nrow(data), ncol = length(col_indices))
for (i in 1:nrow(data_to_decay)) {
media_decayed[i,] = media_decayed[i,] + recursive_decay(data_to_decay, lambda, i, i_max = i, L = L)
}
return(media_decayed)
}
#plot(data$date, data$sunshine, type = "l")
#' Questions:
#' - Transform to weekly data instead or not?
#' - Our response variable is the distribution of each product I would guess?
#' - Multiplicative model - requires log transformation, right?
#' - Which to apply decay rate on?
#' Response variable should be distribution data, or create our own by price_data*distribution_data
#' or assume a pattern and add some noise to it.
# First part - Transform the data through decay rate. Necessary or not? It is already decayed, right?
# Check whether it is decayed with this plot
#plot(prod_a_data$date[1:50], prod_a_data$`display - net`[1:50], type = "l", main = "Decayed or not? Probs not")
decayed_spendings = simple_decay_rate(data = data, col_indices = c(19:21,28:30), lambda = lambda_decay_rate)
par(mfrow=c(2,1))
plot(data[,19], type = "l")
plot(decayed_spendings[,1], type = "l")
par(mfrow=c(1,1))
data[,19]
data[1:5,19]
decayed_spendings[1:5,1]
# If you don't have the package installed, please uncomment and run the two lines below.
#library(devtools)
#install_github("DoktorMike/dammmdatagen")
rm(list=ls())
library(dammmdatagen)
#################################################
############### SET PARAMETERS ##################
#################################################
lambda_decay_rate = 0.3
#' mmm_data seems to contain:
#' weather_data
#' competitor_data
#' macro_data
#' distribution_data as product_a.x
#' price_data as product_a.y
#' distribution_data? What is product_b.x and product_a.y? product_a.y seems to be the price. product_a.x seems to be the distribution data
#' price_data as product_a.y
#'
#' Thus, we must merge:
#' offline_data
#' online_data
#' event_data
#' Explanations of data (big X meaning arbitrarily numbered variable):
#' sunshine - standardized measure of how much sunshine there is.
#' precipitation - standardized measure of how much rain there is.
#' temperature - standardized measure of the temperature.
#' competitor_X - seems to be a measure for spending of the competitors.
#' product_X.x - seems to be same as distribution_data.
#' product_X.y - seems to be same as price_data.
#' cpi - Consumer price index.
#' cci - Commodity channel index.
#' gdp - gross domestic product
#' event_X - binary variable indicating whether event X has occurred or not.
#' X, cpm - cost per mille - cost per 1000 displays
#' X, impression -
#' X, net - spending?
####################################
######## PREPARING THE DATA ########
####################################
# Returns specific names for columns for offline and online data
get_col_names_marketing_data = function(data_set, to_append) {
colnames(data_set) = c("date", apply(as.matrix(colnames(data_set)[2:4]),1, function(name) {
return(paste(name, to_append))
})
)
return(data_set)
}
set.seed(12345)
mmm_data = generateData(fromDate = Sys.Date() - 3 * 365, toDate = Sys.Date(), kpi ="sales")
#competitor_data = generateCompetitorData()
#distribution_data = generateDistributionData()
set.seed(12345)
event_data = generateEventData(fromDate = Sys.Date() - 3 * 365, toDate = Sys.Date())
set.seed(12345)
offline_data = generateOfflineData(fromDate = Sys.Date() - 3 * 365, toDate = Sys.Date())
set.seed(12345)
online_data = generateOnlineData(fromDate = Sys.Date() - 3 * 365, toDate = Sys.Date())
#macro_data = generateMacroData()
#price_data = generatePriceData()
offline_data$net = get_col_names_marketing_data(offline_data$net, "- net")
offline_data$impression = get_col_names_marketing_data(offline_data$impression, "- impression")
offline_data$cpm = get_col_names_marketing_data(offline_data$cpm, "- cpm")
online_data$net = get_col_names_marketing_data(online_data$net, "- net")
online_data$impression = get_col_names_marketing_data(online_data$impression, "- impression")
online_data$cpm = get_col_names_marketing_data(online_data$cpm, "- cpm")
all_data = merge(mmm_data, event_data, by = "date")
all_data = merge(all_data, offline_data$net, by = "date")
all_data = merge(all_data, offline_data$impression, by = "date")
all_data = merge(all_data, offline_data$cpm, by = "date")
all_data = merge(all_data, online_data$net, by = "date")
all_data = merge(all_data, online_data$impression, by = "date")
all_data = merge(all_data, online_data$cpm, by = "date")
data = all_data
prod_a_data = data[,c(1:11,14,17:36)]
prod_b_data = data[,c(1:10,12,15,17:36)]
prod_c_data = data[,c(1:10,13,16,17:36)]
prod_a_data$response = prod_a_data$product_a.x*prod_a_data$product_a.y
prod_b_data$response = prod_b_data$product_b.x*prod_b_data$product_b.y
prod_c_data$response = prod_c_data$product_c.x*prod_c_data$product_c.y
# Remove the rest, and keep only the all_data
rm(event_data, online_data, offline_data, mmm_data, all_data)
recursive_decay = function(data_to_decay, lambda, i, i_max, L = 15) {
if (i > max(i_max - L,0)) {
return(data_to_decay[i,]*lambda^(i_max - i + 1) + recursive_decay(data_to_decay, lambda, i = (i - 1), i_max = i_max, L = L))
} else {
return(0)
}
}
# Send in the nets of each media channel.
# As of currently, we send in 6 media channels - 3 online, 3 offline
# Send in lambdas as a matrix or vector
# TBD
simple_decay_rate = function(data, col_indices, lambda, L = 15) {
data_to_decay = as.matrix(data[,col_indices])
media_decayed = matrix(rep(0,nrow(data)*length(col_indices)), nrow = nrow(data), ncol = length(col_indices))
for (i in 1:nrow(data_to_decay)) {
media_decayed[i,] = media_decayed[i,] + recursive_decay(data_to_decay, lambda, i, i_max = i, L = L)
}
return(media_decayed)
}
#plot(data$date, data$sunshine, type = "l")
#' Questions:
#' - Transform to weekly data instead or not?
#' - Our response variable is the distribution of each product I would guess?
#' - Multiplicative model - requires log transformation, right?
#' - Which to apply decay rate on?
#' Response variable should be distribution data, or create our own by price_data*distribution_data
#' or assume a pattern and add some noise to it.
# First part - Transform the data through decay rate. Necessary or not? It is already decayed, right?
# Check whether it is decayed with this plot
#plot(prod_a_data$date[1:50], prod_a_data$`display - net`[1:50], type = "l", main = "Decayed or not? Probs not")
decayed_spendings = simple_decay_rate(data = data, col_indices = c(19:21,28:30), lambda = lambda_decay_rate)
par(mfrow=c(2,1))
plot(data[,19], type = "l")
plot(decayed_spendings[,1], type = "l")
par(mfrow=c(1,1))
0.9999999999999^15
0.9999999999999^132
0.9999999999999^132333
0.9999999999999^132333333333333
0.9999999999999^132333333333
0.9999999999999^1323333333333
0.9999999999999^13233333333333
0.9999999999999^132333333333333
0.99^3
0.99^33
0.99^333
0.99^50
help(tanh)
help("pmax")
esm <- EuStockMarkets
tmp <- EuStockMarkets[,2]
smi <- ts(tmp, start=start(esm), freq=frequency(esm))
plot(smi, main="SMI Daily Closing Value")
View(esm)
EuStockMarkets
plot(log(AirPassengers), ylab="log(Pax)", main=...)
plot(log(AirPassengers), ylab="log(Pax)", main="AirPassengers log")
plot(AirPassengers, ylab="log(Pax)", main="AirPassengers log")
AirPassengers
set.seed(24)
E    <- rnorm(200, 0, 1)
x    <- numeric()
x[1] <- E[1]
for(i in 2:200) x[i] <- 0.8*x[i-1] + E[i]
plot(ts(x), main= "AR(1) with...")
plot(ts(x), main= "AR(1) with alpha_1 = 0.8")
1:26
sin_curves = matrix(NA, nrow = 156, ncol = 26)
cos_curves = matrix(NA, nrow = 156, ncol = 26)
k = 1
sin(2*pi*x*k/n)
n = 52
sin(2*pi*x*k/n)
pi
x
x = seq(1,156,1)
sin(2*pi*x*k/n)
n = 52
for (k in 1:26) {
sin_curves[,k] = sin(2*pi*x*k/n)
cos_curves[,k] = cos(2*pi*x*k/n)
}
sin_sum = rowSums(sin_curves)
cos_sum = rowSums(cos_curves)
sin_sum
cos_sum
plot(sin_sum)
plot(cos_sum)
sin_curves = matrix(NA, nrow = 156, ncol = 26)
cos_curves = matrix(NA, nrow = 156, ncol = 26)
n = 52
set.seed(123)
for (k in 1:26) {
sin_curves[,k] = runif(156,0,10)*sin(2*pi*x*k/n)
cos_curves[,k] = runif(156,0,10)*cos(2*pi*x*k/n)
}
sin_sum = rowSums(sin_curves)
cos_sum = rowSums(cos_curves)
plot(sin_sum)
plot(cos_sum)
runif(156,0,10)*sin(2*pi*x*k/n)
sin_curves = matrix(NA, nrow = 156, ncol = 26)
cos_curves = matrix(NA, nrow = 156, ncol = 26)
n = 52
set.seed(123)
for (k in 1:26) {
sin_curves[,k] = runif(156,0,10)*sin(2*pi*x*k/n)
cos_curves[,k] = runif(156,0,10)*cos(2*pi*x*k/n)
}
sin_sum = rowSums(sin_curves)
cos_sum = rowSums(cos_curves)
plot(sin_sum)
plot(cos_sum)
plot(sin_sum, type = "l", lwd = 3, ylim=c(min(sin_sum,cos_cum),max(sin_sum,cos_cum)))
sin_curves = matrix(NA, nrow = 156, ncol = 26)
cos_curves = matrix(NA, nrow = 156, ncol = 26)
n = 52
set.seed(123)
for (k in 1:26) {
sin_curves[,k] = runif(156,0,10)*sin(2*pi*x*k/n)
cos_curves[,k] = runif(156,0,10)*cos(2*pi*x*k/n)
}
sin_sum = rowSums(sin_curves)
cos_sum = rowSums(cos_curves)
plot(sin_sum, type = "l", lwd = 3, ylim=c(min(sin_sum,cos_sum),max(sin_sum,cos_sum)))
lines(cos_sum, col = "blue", lwd = 3)
a = matrix(c(10,20,30,40), ncol = 2, nrow = 2)
a
b = matrix(seq(1,4,1), ncol = 2, nrow = 2)
a + b
curve_sum = sin_sum + cos_sum
lines(curve_sum, col = "red", lwd = 3)
plot(curve_sum, col = "red", lwd = 3)
sin_curves = matrix(NA, nrow = 156, ncol = 26)
cos_curves = matrix(NA, nrow = 156, ncol = 26)
n = 52
set.seed(123)
for (k in 1:26) {
sin_curves[,k] = runif(156,0,1)*sin(2*pi*x*k/n)
cos_curves[,k] = runif(156,0,1)*cos(2*pi*x*k/n)
}
sin_sum = rowSums(sin_curves)
cos_sum = rowSums(cos_curves)
plot(sin_sum, type = "l", lwd = 3, ylim=c(min(sin_sum,cos_sum),max(sin_sum,cos_sum)))
lines(cos_sum, col = "blue", lwd = 3)
curve_sum = sin_sum + cos_sum
lines(curve_sum, col = "red", lwd = 3)
library(forecast)
install.packages("forecast")
help(rlm)
??rlm
help(rlm)
setwd("~/Desktop/Programmeringsprojekt/ML-Implementations/Filips ML package")
#https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
# create("Filips.ML.package")
# setwd("./cats")
# document()
#' When update to package is done (for Filips ML package):
#' 1. Set working directory to package.
#' 2. setwd("~/Desktop/Programmeringsprojekt/Machine Learning/Filips ML package/Filips.ML.package")
#'    document()
#' 3. Set working directory to folder above and reinstall the package with updates.
#'    setwd("~/Desktop/Programmeringsprojekt/Machine Learning/Filips ML package")
#'    install("Filips.ML.package")
#'
# To use the ML functions, run the code below.
library("devtools")
library(roxygen2)
setwd("/Users/filipcornell/Desktop/Programmeringsprojekt/ML-Implementations/Filips ML package/Filips.ML.package")
document()
setwd("/Users/filipcornell/Desktop/Programmeringsprojekt/ML-Implementations/Filips ML package")
install("Filips.ML.package")
#this.dir <- dirname(parent.frame(2)$ofile) #To set it to source file location
#setwd(this.dir) #To set it to source file location
#library("Filips.ML.package")
install.packages("lightgbm")
install.packages("lightGBM")
library(lightgbm)
